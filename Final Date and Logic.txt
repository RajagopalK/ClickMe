9.    Validating Date Format
Obtain a date string in the format dd/mm/yyyy. Write code to validate the given date against the given format.
 
Include a class UserMainCode with a static method validateDate which accepts a string .
 
The return type of the validateDate method is 1 if the given date format matches the specified format , If the validation fails return the output as -1.
 
Create a Main class which gets date string as an input and call the static method validateDate present in the UserMainCode.
 
Input and Output Format:
Input is a string .
Refer sample output for formatting specifications
 
Sample Input 1:
12/06/1987
Sample Output 1:
Valid date format
 
Sample Input 2:
03/1/1987
Sample Output 2:
Invalid date format
importjava.text.ParseException;
importjava.text.SimpleDateFormat;
importjava.util.Date;
importjava.util.Scanner;

publicclassUserMainCode {

publicstaticvoidgetvalues(String s1) 
{
if(s1.matches("[0-9]{2}[/]{1}[0-9]{2}[/]{1}[0-9]{4}"))
{
SimpleDateFormatsdf=newSimpleDateFormat("dd/MM/yyyy");
sdf.setLenient(false);
try {
Date d1=sdf.parse(s1);
System.out.println("valid");
} catch (ParseException e) 
{
System.out.println("Invalid");
}
}
else
System.out.println("Invalid");

}

publicstaticvoid main(String[] args) 
{

Scanner in=newScanner(System.in);
String s1=in.next();
UserMainCode.getvalues(s1);
}
}
 
 
10.  Validate Time
Obtain a time string as input in the following format 'hh:mm am' or 'hh:mm pm'. Write code to validate it using the following rules:
 
- It should be a valid time in 12 hrs format
- It should have case insensitive AM or PM
 
Include a class UserMainCode with a static method validateTime which accepts a string.
 
If the given time is as per the given rules then return 1 else return -1.If the value returned is 1 then print as valid time else print as Invalid time.
 
Create a Main class which gets time(string value) as an input and call the static method validateTimepresent in the UserMainCode.
 
Input and Output Format:
Input is a string .
Output is a string .

 
Sample Input 1:
09:59 pm
Sample Output 1:
Valid time
 
Sample Input 2:
10:70 AM
Sample Output 2:
Invalid time
importjava.text.ParseException;
importjava.text.SimpleDateFormat;
importjava.util.Date;
importjava.util.Scanner;

publicclassUserMainCode {

publicstaticvoidgetvalues(String str) 
{
	if(str.matches("[0-9]{2}:[0-9]{2}\\s(am|pm|AM|PM)"))
	{
	SimpleDateFormatsdf = newSimpleDateFormat("h:mm");
	sdf.setLenient(false);
	try
	{
	Date d1=sdf.parse(str);	
	System.out.println("Valid time");
	}
	catch(Exception e){
	System.out.println("Invalid time");
	}
	}
	else
	{
		System.out.println("Invalid time");
	}

}

publicstaticvoid main(String[] args) 
{

Scanner in=newScanner(System.in);
String s1=in.next();
UserMainCode.getvalues(s1);
}
}
30.Find the difference between Dates in months
Given a method with two date strings in yyyy-mm-dd format as input. Write code to find the difference between two dates in months.
 
Include a class UserMainCode with a static method getMonthDifference which accepts two date strings as input.
 
The return type of the output is an integer which returns the diffenece between two dates in months.
 
Create a class Main which would get the input and call the static method getMonthDifference present in the UserMainCode.
 
Input and Output Format:
Input consists of two date strings.
Format of date : yyyy-mm-dd.
 
Output is an integer.
Refer sample output for formatting specifications.
 
Sample Input 1:
2012-03-01
2012-04-16
Sample Output 1:
1

 
Sample Input 2:
2011-03-01
2012-04-16
Sample Output 2:
13

importjava.text.ParseException;
importjava.text.SimpleDateFormat;
importjava.util.Calendar;
importjava.util.Date;
importjava.util.Scanner;
publicclassUserMainCode {
publicstaticvoidgetvalues(String str,String str1) 
{
	intres,a,b;
	if(str.matches("[0-9]{4}-[0-9]{2}-[0-9]{2}") && str1.matches("[0-9]{4}-[0-9]{2}-[0-9]{2}"))
	{
	SimpleDateFormatsdf = newSimpleDateFormat("yyyy-MM-dd");
	sdf.setLenient(false);
	try
	{
		Calendar c=Calendar.getInstance();
		Date d1=sdf.parse(str);
		Date d2=sdf.parse(str1);
		c.setTime(d1);
        a=c.get(Calendar.MONTH);
int year=c.get(Calendar.YEAR);
c.setTime(d2);
        b=c.get(Calendar.MONTH);
int year1=c.get(Calendar.YEAR);
if(year1>=year)
        {
	res=Math.abs((year1-year)*12+(b-a));
        }
else
	res=Math.abs((year-year1)*12+(a-b));
System.out.println(res);
		}
	catch(ParseException e)
	{
		System.out.println("-1");
	
    }
	}
	else
		System.out.println("-1");
}
publicstaticvoid main(String[] args) 
{

Scanner in=newScanner(System.in);
String s1=in.next();
String n1=in.next();
UserMainCode.getvalues(s1,n1);
}
}
 
33.Difference between two dates in days
Get two date strings as input and write code to find difference between two dates in days.
 
Include a class UserMainCode with a static method getDateDifference which accepts two date strings as input.
 
The return type of the output is an integer which returns the diffenece between two dates in days.
 
Create a class Main which would get the input and call the static method getDateDifference present in the UserMainCode.
 
Input and Output Format:
Input consists of two date strings.
Format of date : yyyy-mm-dd.
 
Output is an integer.
Refer sample output for formatting specifications.
 
Sample Input 1:
2012-03-12
2012-03-14
Sample Output 1:
2

Sample Input 2:
2012-04-25
2012-04-28
Sample Output 2:
3
importjava.text.ParseException;
importjava.text.SimpleDateFormat;
importjava.util.Calendar;
importjava.util.Date;
importjava.util.Scanner;
publicclassUserMainCode {
publicstaticvoidgetvalues(String str,String str1) 
{
if(str.matches("[0-9]{4}-[0-9]{2}-[0-9]{2}") && str1.matches("[0-9]{4}-[0-9]{2}-[0-9]{2}"))
	{

	SimpleDateFormatsdf = newSimpleDateFormat("yyyy-MM-dd");
	sdf.setLenient(false);
	try
	{
		Calendar c=Calendar.getInstance();
		Date d1=sdf.parse(str);
		Date d2=sdf.parse(str1);
		c.setTime(d1);
		long k=c.getTimeInMillis();
c.setTime(d2);
long l=c.getTimeInMillis();
long diff=l-k;
longans=diff/(1000*24*60*60);
System.out.println(ans);
		}
	catch(ParseException e)
	{
		System.out.println("-1");
	
    }
}
else
		System.out.println("-1");

}
publicstaticvoid main(String[] args) 
{

Scanner in=newScanner(System.in);
String s1=in.next();
String n1=in.next();
UserMainCode.getvalues(s1,n1);
}
}

51.Finding the day of birth
Given an input as date of birth of person, write a program to calculate on which day (MONDAY,TUESDAY....) he was born store and print the day in Upper Case letters.

Include a class UserMainCode with a static method calculateBornDay which accepts a string as input.
 
The return type of the output is a string which should be the day in which the person was born.
 
Create a class Main which would get the input and call the static method calculateBornDay present in the UserMainCode.
 
Input and Output Format:
NOTE: date format should be(dd-MM-yyyy)
Input consists a date string.
Output is a string which the day in which the person was born.
Refer sample output for formatting specifications.
 
Sample Input 1:
29-07-2013
Sample Output 1:
MONDAY

Sample Input 2:
14-12-1992
Sample Output 2:
MONDAY
importjava.text.ParseException;
importjava.text.SimpleDateFormat;
importjava.util.Date;
importjava.util.Scanner;
publicclassUserMainCode {
publicstatic String getvalues(String str) 
{
if(str.matches("[0-9]{4}-[0-9]{2}-[0-9]{2}"))
{
	SimpleDateFormatsdf = newSimpleDateFormat("yyyy-MM-dd");
	SimpleDateFormat sdf1 = newSimpleDateFormat("EEEE");
String s1;
	sdf.setLenient(false);
sdf1.setLenient(false);
	try
	{
	Date d1=sdf.parse(str);
	     s1=sdf1.format(d1);
		}
	catch(ParseException e)
	{
		return"Invalid";
	
    }
	return s1.toUpperCase();
}
else
return “Invalid”;
}
publicstaticvoid main(String[] args) 
{

Scanner in=newScanner(System.in);
String s1=in.next();
System.out.println(UserMainCode.getvalues(s1));
}
}
 
53.Experience Calculator
Write a program to read Date of Joining and current date as Strings and Experience as integer and validate whether the given experience and calculated experience are the same. Print “true” if same, else “false”.

 
Include a class UserMainCode with a static method calculateExperience which accepts 2 strings and an integer. The return type is boolean.
Create a Class Main which would be used to accept 2 string (dates) and an integer and call the static method present in UserMainCode.
Input and Output Format:
Input consists of 2 strings and an integer, where the 2 strings corresponds to the date of joining and current date, and the integer is the experience.
Output is either “true” or “false”.
Refer sample output for formatting specifications.
 
Sample Input 1:
11/01/2010
01/09/2014
4
Sample Output 1:
true
 
Sample Input 2:
11/06/2009
01/09/2014
4
Sample Output 2:
False
importjava.text.ParseException;
importjava.text.SimpleDateFormat;
importjava.util.Calendar;
importjava.util.Date;
importjava.util.Scanner;
publicclassUserMainCode {
publicstaticbooleangetvalues(String str,String str1,int n) 
{
if(str.matches("[0-9]{2}[/]{1}[0-9]{2}[/]{1}[0-9]{4}") && str1.matches("[0-9]{2}[/]{1}[0-9]{2}[/]{1}[0-9]{4}"))
{

	SimpleDateFormatsdf = newSimpleDateFormat("dd/MM/yyyy");
       String s1;
	sdf.setLenient(false);
	try
	{
		Calendar c=Calendar.getInstance();
		 Date d1=sdf.parse(str);
		 Date d2=sdf.parse(str1);
		c.setTime(d1);
		int y1=c.get(Calendar.YEAR);
		int m1=c.get(Calendar.MONTH);
		int d11=c.get(Calendar.DATE);
		c.setTime(d2);
		int y2=c.get(Calendar.YEAR);
		int m2=c.get(Calendar.MONTH);
		int d22=c.get(Calendar.DATE);
		int k=Math.abs(y2-y1);
		if(m1>m2)
	      k--;
	   else if(m2==m1 && d11>d22)
			k--;
		if(k==n)
		 {
			returntrue;
		 }
	}
	catch(ParseException e)
	{
		returnfalse;
	
    }
}
	returnfalse;
}
publicstaticvoid main(String[] args) 
{

Scanner in=newScanner(System.in);
String s1=in.next();
String s2=in.next();
int n=in.nextInt();
System.out.println(UserMainCode.getvalues(s1,s2,n));
}
}
60.Date Validation
 
Write a program to read a string representing a date. The date can be in any of the three formats
1:dd-MM-yyyy 2: dd/MM/yyyy 3: dd.MM.yyyy
If the date is valid, print valid else print invalid.
Include a class UserMainCode with a static method getValidDate which accepts a string. The return type (integer) should be based on the validity of the date.
Create a Class Main which would be used to accept Input string and call the static method present in UserMainCode.
Input and Output Format:
Input consists of a string.
Output consists of a string.
Refer sample output for formatting specifications.
Sample Input 1:
03.12.2013
Sample Output 1:
valid
 
Sample Input 2:
03$12$2013
Sample Output 3:
Invalid
importjava.text.ParseException;
importjava.text.SimpleDateFormat;
importjava.util.Date;
importjava.util.Scanner;
publicclassUserMainCode {
publicstatic String getvalues(String str) 
{
if(str.matches("[0-9]{2}[-]{1}[0-9]{2}[-]{1}[0-9]{4}") || str.matches("[0-9]{2}[/]{1}[0-9]{2}[/]{1}[0-9]{4}") || str.matches("[0-9]{2}[.]{1}[0-9]{2}[.]{1}[0-9]{4}"))
{

	SimpleDateFormatsdf = newSimpleDateFormat("dd-MM-yyyy");
	SimpleDateFormat sdf1 = newSimpleDateFormat("dd/MM/yyyy");
	SimpleDateFormat sdf2 = newSimpleDateFormat("dd.MM.yyyy");
    String s1;
	sdf.setLenient(false);
sdf1.setLenient(false);
sdf2.setLenient(false);
	try
	{
		
		 Date d1=sdf.parse(str);
		return"valid";
	}
	catch(ParseException e)
	{
		try
		{
		Date d2=sdf1.parse(str);
		return"valid";
		}
	catch(ParseException e1)
	    {
		try
		{
		 Date d3=sdf2.parse(str);
		return"valid";
		}
		catch(ParseException e2)
	    {
			return"invalid";
	    }
	    }
	
    }
}
else
return “invalid”;
}
publicstaticvoid main(String[] args) 
{

Scanner in=newScanner(System.in);
String s1=in.next();
System.out.println(UserMainCode.getvalues(s1));
}
}
63.Month Name
 
Given a date as a string input in the format dd-mm-yy, write a program to extract the month and to print the month name in upper case.
 
Include a class UserMainCode with a static method “getMonthName” that accepts a String argument and returns a String that corresponds to the month name.
 
Create a class Main which would get the String as input and call the static method getMonthName present in the UserMainCode.
 
The month names are {JANUARY, FEBRUARY, MARCH, APRIL, MAY, JUNE, JULY, AUGUST, SEPTEMBER, OCTOBER, NOVEMBER, DECEMBER}
 
Input and Output Format:
Input consists of a String.
Output consists of a String.
 
Sample Input:
01-06-82
 
Sample Output:
JUNE
importjava.text.ParseException;
importjava.text.SimpleDateFormat;
importjava.util.Date;
importjava.util.Scanner;
publicclassUserMainCode {
publicstatic String getvalues(String str) 
{
if(str.matches("[0-9]{2}[-]{1}[0-9]{2}[-]{1}[0-9]{2}"))
{	
SimpleDateFormatsdf = newSimpleDateFormat("dd-MM-yy");
	SimpleDateFormat sdf1 = newSimpleDateFormat("MMMM");
    String s1;
	sdf.setLenient(false);
sdf1.setLenient(false);
	try
	{
	     Date d1=sdf.parse(str);
	     s1=sdf1.format(d1);
		}
	catch(ParseException e)
	{
		return"Invalid";
	
    }
	return s1.toUpperCase();
}
else
return"Invalid";

}
publicstaticvoid main(String[] args) 
{

Scanner in=newScanner(System.in);
String s1=in.next();
System.out.println(UserMainCode.getvalues(s1));
}
}

67.Month : Number of Days
 
Given two inputs year and month (Month is coded as: Jan=0, Feb=1 ,Mar=2 ...), write a program to find out total number of days in the given month for the given year.
 
Include a class UserMainCode with a static method “getNumberOfDays” that accepts 2 integers as arguments and returns an integer. The first argument corresponds to the year and the second argument corresponds to the month code. The method returns an integer corresponding to the number of days in the month.
 
Create a class Main which would get 2 integers as input and call the static method getNumberOfDays present in the UserMainCode.
 
Input and Output Format:
Input consists of 2 integers that correspond to the year and month code.
Output consists of an integer that correspond to the number of days in the month in the given year.
 
Sample Input:
2000
1
 
Sample Output:
29

importjava.util.Calendar;
importjava.util.Date;
importjava.util.GregorianCalendar;
importjava.util.Scanner;
publicclassUserMainCode {
publicstaticintgetvalues(int s1,int s2) 
{
	int k;
	Calendar c=Calendar.getInstance();
	c.set(Calendar.YEAR,s1);
	c.set(Calendar.MONTH,s2);
	GregorianCalendar g=newGregorianCalendar();
boolean b=g.isLeapYear(s1);
if(b || s2!=1)
	 k=c.getActualMaximum(c.DAY_OF_MONTH);
else
	k=28;
	return k;
}
publicstaticvoid main(String[] args) 
{

Scanner in=newScanner(System.in);
int s1=in.nextInt();
int s2=in.nextInt();
System.out.println(UserMainCode.getvalues(s1,s2));
}
}

13.Day of the Week
 
Write a program to read a date as string (MM-dd-yyyy) and return the day of week on that date.
Include a class UserMainCode with a static method getDay which accepts the string. The return type (string) should be the day of the week.
Create a Class Main which would be used to accept Input string and call the static method present in UserMainCode.
Input and Output Format:
Input consists of a string.
Output consists of a string.
Refer sample output for formatting specifications.
Sample Input 1:
07-13-2012
Sample Output 1:
Friday
importjava.text.ParseException;
importjava.text.SimpleDateFormat;
importjava.util.Date;
importjava.util.Scanner;
publicclassUserMainCode {
publicstatic String getvalues(String str) 
{
if(str.matches("[0-9]{2}[-]{1}[0-9]{2}[-]{1}[0-9]{4}"))
{
	SimpleDateFormatsdf = newSimpleDateFormat("MM-dd-yyyy");
	SimpleDateFormat sdf1 = newSimpleDateFormat("EEEE");
    String s1;
	sdf.setLenient(false);
sdf1.setLenient(false);
	try
	{
	     Date d1=sdf.parse(str);
	s1=sdf1.format(d1);
		}
	catch(ParseException e)
	{
		return"Invalid";
	
    }
	returns1;
}
else
return"Invalid";
}
publicstaticvoid main(String[] args) 
{

Scanner in=newScanner(System.in);
String s1=in.next();
System.out.println(UserMainCode.getvalues(s1));
}
}
 

21.Date Format Conversion
 
Given a date string in the format dd/mm/yyyy, write a program to convert the given date to the format dd-mm-yy.
 
Include a class UserMainCode with a static method “convertDateFormat” that accepts a String and returns a String.
 
Create a class Main which would get a String as input and call the static method convertDateFormat present in the UserMainCode.
 
Input and Output Format:
Input consists of a String.
Output consists of a String.
 
Sample Input:
12/11/1998
 
Sample Output:
12-11-98
importjava.text.ParseException;
importjava.text.SimpleDateFormat;
importjava.util.Date;
importjava.util.Scanner;
publicclassUserMainCode {
publicstatic String getvalues(String str) 
{
if(str.matches("[0-9]{2}[/]{1}[0-9]{2}[/]{1}[0-9]{4}"))
{

	SimpleDateFormatsdf = newSimpleDateFormat("dd/MM/yyyy");
	SimpleDateFormat sdf1 = newSimpleDateFormat("dd-MM-yy");
    String s1;
	sdf.setLenient(false);
sdf1.setLenient(false);
	try
	{
	     Date d1=sdf.parse(str);
	     s1=sdf1.format(d1);
		}
	catch(ParseException e)
	{
		return"Invalid";
	
    }
	return s1;
}
else
return"Invalid";
}
publicstaticvoid main(String[] args) 
{

Scanner in=newScanner(System.in);
String s1=in.next();
System.out.println(UserMainCode.getvalues(s1));
}
}

 
25.Next Year day
 
Given a date string in dd/mm/yyyy format, write a program to calculate the day which falls on the same date next year. Print the output in small case.
 
The days are sunday, monday, tuesday, wednesday, thursday, friday and saturday.
 
Include a class UserMainCode with a static method “nextYearDay” that accepts a String and returns a String.
 
Create a class Main which would get a String as input and call the static method nextYearDay present in the UserMainCode.
 
Input and Output Format:
Input consists of a String.
Output consists of a String.
 
Sample Input:
13/07/2012
 
Sample Output:
Saturday

importjava.text.ParseException;
importjava.text.SimpleDateFormat;
importjava.util.Calendar;
importjava.util.Date;
importjava.util.Scanner;
publicclassUserMainCode {
publicstatic String getvalues(String str) 
{
if(str.matches("[0-9]{2}[/]{1}[0-9]{2}[/]{1}[0-9]{4}"))
{

	SimpleDateFormatsdf = newSimpleDateFormat("dd/MM/yyyy");
	SimpleDateFormat sdf1 = newSimpleDateFormat("EEEE");
    String s1;
	sdf.setLenient(false);
sdf1.setLenient(false);
	try
	{
	     Date d1=sdf.parse(str);
	     Calendar c=Calendar.getInstance();
	c.setTime(d1);
	c.add(Calendar.YEAR,1);
	     Date d2=c.getTime();
	     s1=sdf1.format(d2);
		}
	catch(ParseException e)
	{
		return"Invalid";
	
    }
	return s1;
}
else
return"Invalid";
}
publicstaticvoid main(String[] args) 
{

Scanner in=newScanner(System.in);
String s1=in.next();
System.out.println(UserMainCode.getvalues(s1));
}
}
54.DOB - Validation

Write a program to validate the Date of Birth given as input in String format (MM/dd/yyyy) as per the validation rules given below. Return true for valid dates else return false.
1. Value should not be null
2. month should be between 1-12, date should be between 1-31 and year should be a four digit number.
Include a class UserMainCode with a static method ValidateDOB which accepts the string. The return type is TRUE / FALSE.
Create a Class Main which would be used to accept the string and call the static method present in UserMainCode.

Input and Output Format:
Input consists of a string.
Output consists of TRUE / FALSE.
Refer sample output for formatting specifications.

Sample Input 1:
12/23/1985

Sample Output 1:
TRUE

Sample Input 2:
31/12/1985

Sample Output 2:
FALSE
importjava.text.ParseException;
importjava.text.SimpleDateFormat;
importjava.util.Date;
importjava.util.Scanner;

publicclassUserMainCode {

publicstaticStringgetvalues(String s1) 
{
if(str.matches("[0-9]{2}[/]{1}[0-9]{2}[/]{1}[0-9]{4}"))
{
SimpleDateFormatsdf=newSimpleDateFormat("MM/dd/yyyy");
sdf.setLenient(false);
try {
Date d1=sdf.parse(s1);
return"valid";
} catch (ParseException e) 
{
	return"Invalid";
}
}
else
return"Invalid";

}

publicstaticvoid main(String[] args) 
{

Scanner in=newScanner(System.in);
String s1=in.next();
System.out.println(UserMainCode.getvalues(s1));
}
}

61.String Processing - ZigZag

Write a program to read a string containing date in DD-MM-YYYY format. find the number of days in the given month.

Note - In leap year February has got 29 days.

Include a class UserMainCode with a static method getLastDayOfMonth which accepts the string. The return type is the integer having number of days.

Create a Class Main which would be used to accept the string and call the static method present in UserMainCode.

Input and Output Format:
Input consists of a string.
Output consists of integer.
Refer sample output for formatting specifications.

Sample Input 1:
12-06-2012
Sample Output 1:
30

Sample Input 2:
10-02-2012
Sample Output 2:
29
importjava.text.ParseException;
importjava.text.SimpleDateFormat;
importjava.util.Calendar;
importjava.util.Date;
importjava.util.Scanner;
publicclassUserMainCode {
publicstaticintgetvalues(String s1) 
{
if(s1.matches("[0-9]{2}[-]{1}[0-9]{2}[-]{1}[0-9]{4}"))
{
	SimpleDateFormatsdf=newSimpleDateFormat("dd-MM-yyyy");
	sdf.setLenient(false);
	try {
	Date d1=sdf.parse(s1);
	Calendar c=Calendar.getInstance();
	c.setTime(d1);
	int k=c.getActualMaximum(c.DAY_OF_MONTH);
	return k;
	} 
	catch (ParseException e) 
	{
		return -1;
	}
}
else
return -1;
}
publicstaticvoid main(String[] args) 
{
Scanner in=newScanner(System.in);
String s1=in.nextLine();
System.out.println(UserMainCode.getvalues(s1));
}
}
62.Leap Year

Write a program to read a string containing date in DD/MM/YYYY format and check if its a leap year. If so, return true else return false.

Include a class UserMainCode with a static method isLeapYear which accepts the string. The return type is the boolean indicating TRUE / FALSE.

Create a Class Main which would be used to accept the string and call the static method present in UserMainCode.

Input and Output Format:

Input consists of a string.

Output consists of TRUE / FALSE.

Refer sample output for formatting specifications.

Sample Input 1:

23/02/2012

Sample Output 1:

TRUE

Sample Input 2:

12/12/2011

Sample Output 2:

FALSE
importjava.text.ParseException;
importjava.text.SimpleDateFormat;
importjava.util.Calendar;
importjava.util.Date;
importjava.util.GregorianCalendar;
importjava.text.ParseException;
importjava.text.SimpleDateFormat;
importjava.util.Calendar;
importjava.util.Date;
importjava.util.GregorianCalendar;
importjava.util.Scanner;
publicclassUserMainCode {
publicstaticbooleangetvalues(String s1) 
{
if(str.matches("[0-9]{2}[/]{1}[0-9]{2}[/]{1}[0-9]{4}"))
{
SimpleDateFormatsdf=newSimpleDateFormat("dd/MM/yyyy");
try
    {
    Date d1=sdf.parse(s1);
GregorianCalendar g=newGregorianCalendar();
    Calendar c=Calendar.getInstance();
c.setTime(d1);
int n1=c.get(Calendar.YEAR);
boolean b=g.isLeapYear(n1);
return b;
}
catch (ParseException e) 
	{
		returnfalse;
	}
}
else
returnfalse;
}
publicstaticvoid main(String[] args) 
{
Scanner in=newScanner(System.in);
String s1=in.nextLine();
System.out.println(UserMainCode.getvalues(s1));
}
}

38.Day of Week

Write a program to read a string  containing date in DD/MM/YYYY format and prints the day of the week that date falls on.
Return the day in lowercase letter (Ex: monday)

Include a class UserMainCode with a static method getDayOfWeek which accepts the string. The return type is the string.
Create a Class Main which would be used to accept the string and call the static method present in UserMainCode.

Input and Output Format:
Input consists of a string.
Output consists of a string.
Refer sample output for formatting specifications.

Sample Input 1:
02/04/1985
Sample Output 1:
Tuesday
importjava.text.ParseException;
importjava.text.SimpleDateFormat;
importjava.util.Date;
importjava.util.Scanner;
publicclassUserMainCode {
publicstatic String getvalues(String str) 
{
if(str.matches("[0-9]{2}[/]{1}[0-9]{2}[/]{1}[0-9]{4}"))
{
	SimpleDateFormatsdf = newSimpleDateFormat("dd/MM/yyyy");
	SimpleDateFormat sdf1 = newSimpleDateFormat("EEEE");
    String s1;
	sdf.setLenient(false);
sdf1.setLenient(false);
	try
	{
	     Date d1=sdf.parse(str);
	     s1=sdf1.format(d1);
		}
	catch(ParseException e)
	{
		return"Invalid";
	
    }
	return s1;
}
else
return"Invalid";
}
publicstaticvoid main(String[] args) 
{

Scanner in=newScanner(System.in);
String s1=in.next();
System.out.println(UserMainCode.getvalues(s1));
}
}

39.Add Time

Write a program to read  two String variables containing time intervals in hh:mm:ss format. Add the two time intervals and return a string in days:hours:minutes:seconds format where DD is number of days.
Hint: Maximum value for hh:mm:ss is 23:59:59

Include a class UserMainCode with a static method addTime which accepts the string values. The return type is the string.
Create a Class Main which would be used to accept the two string values and call the static method present in UserMainCode.

Input and Output Format:
Input consists of two string.
Output consists of a string.
Refer sample output for formatting specifications.

Sample Input 1:
12:45:30
13:50:45
Sample Output 1:
1:2:36:15

Sample Input 2:
23:59:59
23:59:59
Sample Output 2:
1:23:59:58
importjava.text.ParseException;
importjava.text.SimpleDateFormat;
importjava.util.Calendar;
importjava.util.Date;
importjava.util.Scanner;
importjava.util.TimeZone;
publicclassUserMainCode {
publicstatic String getvalues(String s1,String s2) 
{
if(s1.matches("[0-9]{2}:[0-9]{2}:[0-9]{2}") && s1.matches("[0-9]{2}:[0-9]{2}:[0-9]{2}"))
{
	try
	{
	SimpleDateFormatsdf=newSimpleDateFormat("HH:mm:ss");
               sdf.setTimeZone(TimeZone.getTimeZone("UTC"));
    Date d=sdf.parse(s1);
    Date d1=sdf.parse(s2);
	Calendar c=Calendar.getInstance();
      c.setTimeZone(TimeZone.getTimeZone("UTC"));
	c.setTime(d);
	int h=c.get(Calendar.HOUR_OF_DAY);
	int min=c.get(Calendar.MINUTE);
	int sec=c.get(Calendar.SECOND);
	c.setTime(d1);
	int h1=c.get(Calendar.HOUR_OF_DAY);
	int min1=c.get(Calendar.MINUTE);
	int sec1=c.get(Calendar.SECOND);
	intsec2=(sec+sec1);
	int min2=(min+min1);
	int h2=(h+h1);
	int day=0;
if(sec2>60)
{
sec2=sec2-60;
min2++;

}
if(min2>60)
{
min2=min2-60;
h2++;
}
if(h2>=24)
{
h2=h2-24;
day++;
}
String dd,hh,mm,ss,ans="";
dd=String.valueOf(day);
hh=String.valueOf(h2);
mm=String.valueOf(min2);
ss=String.valueOf(sec2);
ans=dd+":"+hh+":"+mm+":"+ss;
returnans;
	}
	catch(ParseException e)
	{
		return"invalid";
	}
}
return"invalid";
}
publicstaticvoid main(String[] args) 
{

Scanner in=newScanner(System.in);
String s1=in.next();
String s2=in.next();
System.out.println(UserMainCode.getvalues(s1,s2));
}
}


 
41.Date Format

Write a program to read  two String variables in DD-MM-YYYY.Compare the two dates and return the older date in 'MM/DD/YYYY' format.

Include a class UserMainCode with a static method findOldDate which accepts the string values. The return type is the string.
Create a Class Main which would be used to accept the two string values and call the static method present in UserMainCode.

Input and Output Format:
Input consists of two string.
Output consists of a string.
Refer sample output for formatting specifications.

Sample Input 1:
05-12-1987
8-11-2010
Sample Output 1:
12/05/1987
importjava.text.ParseException;
importjava.text.SimpleDateFormat;
importjava.util.Calendar;
importjava.util.Date;
importjava.util.Scanner;
publicclassUserMainCode {
publicstatic String getvalues(String s1,String s2) 
{
if(s1.matches("[0-9]{2}[/]{1}[0-9]{2}[/]{1}[0-9]{4}")&&s1.matches("[0-9]{2}[/]{1}[0-9]{2}[/]{1}[0-9]{4}"))
{

SimpleDateFormatsdf=newSimpleDateFormat("dd-MM-yyyy");
SimpleDateFormat sdf1=newSimpleDateFormat("MM/dd/yyyy");
try
    {
    Date d1=sdf.parse(s1);
    Date d2=sdf.parse(s2);
    Calendar cal=Calendar.getInstance();
cal.setTime(d1);
long y=cal.getTimeInMillis();
cal.setTime(d2);
long y1=cal.getTimeInMillis();
    String s3=sdf1.format(d1);
    String s4=sdf1.format(d2);
if(y<y1)
return  s3;
else
return s4;
    }
catch(ParseException e)
    {
	return"invalid";
    }
}
else
return"invalid";


}
publicstaticvoid main(String[] args) 
{

Scanner in=newScanner(System.in);
String s1=in.next();
String s2=in.next();
System.out.println(UserMainCode.getvalues(s1,s2));
}
}
 

